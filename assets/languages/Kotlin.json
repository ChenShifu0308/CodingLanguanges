{
  "coding_language": "Kotlin",
  "data": [
    {
      "name": "entry_point",
      "content": "fun main() {\n    println(\"Hello, World!\")\n}"
    },
    {
      "name": "hello_world",
      "content": "println(\"Hello, world!\")"
    },
    {
      "name": "variables_constants",
      "content": "var myVariable = 42\nmyVariable = 50\nval myConstant = 42"
    },
    {
      "name": "explicit_types",
      "content": "val explicitDouble: Double = 70.0\n// Boolean\n// Byte, Short, Int, Long, Float, Double, UByte, UShort, UInt, ULong\n// String\n// Any, Unit\n// Nothing\n// dynamic\nexternal fun require(module:String): dynamic"
    },
    {
      "name": "tye_inference",
      "content": "val label = \"The width is \"\nval width = 94\nval widthLabel = label + width"
    },
    {
      "name": "type_aliases",
      "content": "typealias Name = String;\ntypealias NameResolver = () -> String;"
    },
    {
      "name": "smart_casts",
      "content": "fun demo(x: Any) {\n    if (x is String) {\n        print(x.length) // x is automatically cast to String\n    }\n}"
    },
    {
      "name": "equality",
      "content": "//Structural Equality (\u2018==\u2019), Referential equality (\u2018===\u2019), .equals method\ndata class User(val id: Int, val nick: String)\n\nfun testEquals() {\n    val first: Any = User(1, \"linux_china\")\n    val second: Any = User(1, \"linux_china\")\n    println(first == second)  //true\n    println(first === second)  //false, Referential different\n    println(first.equals(second)) //true\n}"
    },
    {
      "name": "nullable_nonnull_nullish_coalescing",
      "content": "val name1: String = \"xx\"\nvar name2: String? = null\n\nfun testNullable() {\n    name2.length //illegal\n    name2?.length //nullable check\n    name2!!.length //you know that\n}\n\n// Elvis Operator\nval name3 = name2 ?: \"good\";"
    },
    {
      "name": "string_interpolation",
      "content": "val apples = 3\nval oranges = 5\nval fruitSummary1 = \"I have ${apples + oranges} pieces of fruit.\"\nval fruitSummary2 = \"\"\"I have ${apples + oranges} pieces of fruit.\"\"\"\nval fruitSummary3 = html(\"\"\"I have ${apples + oranges} pieces of fruit.\"\"\")"
    },
    {
      "name": "range_operator",
      "content": "val names = arrayOf(\"Anna\", \"Alex\", \"Brian\", \"Jack\")\nval count = names.count()\nfor (i in 0..count - 1) {\n    println(\"Person ${i + 1} is called ${names[i]}\")\n}\n// Person 1 is called Anna\n// Person 2 is called Alex\n// Person 3 is called Brian\n// Person 4 is called Jack"
    },
    {
      "name": "inclusive_range_operator",
      "content": "for (index in 1..5) {\n    println(\"$index times 5 is ${index * 5}\")\n}\n// 1 times 5 is 5\n// 2 times 5 is 10\n// 3 times 5 is 15\n// 4 times 5 is 20\n// 5 times 5 is 25"
    },
    {
      "name": "arrays_list",
      "content": "fun main12() {\n    val shoppingList = arrayOf(\n        \"catfish\", \"water\",\n        \"tulips\", \"blue paint\"\n    )\n    shoppingList[1] = \"bottle of water\"\n    val freezeList = listOf(\"first\", \"second\", \"third\")\n    val mutableList = mutableListOf(\"first\", \"second\", \"third\")\n}"
    },
    {
      "name": "set",
      "content": "val set1 = setOf(1 , 2 , 3 , 4 , 3)\nval mutableSet = mutableSetOf(1 , 2 , 3 , 4 , 3);"
    },
    {
      "name": "stream_sequence",
      "content": "val wordsSequence = listOf(\"one\", \"two\", \"three\", \"four\").asSequence()\nval list2 = wordsSequence\n    .filter { println(\"filter: $it\"); it.length > 3 }\n    .map { println(\"length: ${it.length}\"); it.length }\n    .toList()"
    },
    {
      "name": "map",
      "content": "val occupations = mutableMapOf(\n    \"Malcolm\" to \"Captain\",\n    \"Kaylee\" to \"Mechanic\"\n)\noccupations[\"Jayne\"] = \"Public Relations\""
    },
    {
      "name": "tuple",
      "content": "// data class as Tuple in Kotlin\ndata class GasPrices(val a: Double, val b: Double, val c: Double)\n\nfun main7() {\n    val price = GasPrices(3.59, 3.69, 3.79)\n    val (a, b, _) = price\n}"
    },
    {
      "name": "filter_map_reduce",
      "content": "fun main13() {\n    val shoppingList = arrayOf(\"catfish\", \"water\", \"tulips\", \"blue paint\")\n    shoppingList.filter { it.startsWith(\"c\") }\n        .map { it.length }\n        .reduce { acc, i -> acc + i }\n\n    shoppingList.filter { it.startsWith(\"c\") }\n        .forEach(::println)\n}"
    },
    {
      "name": "empty_collections",
      "content": "val emptyArray = arrayOf<String>()\nval emptyMap = mapOf<String, Float>()"
    },
    {
      "name": "functions",
      "content": "fun greet(name: String, day: String): String {\n    return \"Hello $name, today is $day.\"\n}\ngreet(\"Bob\", \"Tuesday\")"
    },
    {
      "name": "variable_number_of_arguments",
      "content": "fun sumOf(vararg numbers: Int): Int {\n    var sum = 0\n    for (number in numbers) {\n        sum += number\n    }\n    return sum\n}\n\nfun main3() {\n    sumOf(42, 597, 12)\n    // sumOf() can also be written in a shorter way:\n    fun sumOf(vararg numbers: Int) = numbers.sum()\n}"
    },
    {
      "name": "function_type",
      "content": "fun makeIncrementer(): (Int) -> Int {\n    val addOne = fun(number: Int): Int {\n        return 1 + number\n    }\n    return addOne\n}\nval increment = makeIncrementer()\nincrement(7)\n\n// makeIncrementer can also be written in a shorter way:\nfun makeIncrementer() = fun(number: Int) = 1 + number"
    },
    {
      "name": "functional_interface",
      "content": "fun interface IntPredicate {\n    fun accept(i: Int): Boolean\n}\n\nval isEven = IntPredicate { it % 2 == 0 }\n\nfun main() {\n    println(\"Is 7 even? - ${isEven.accept(7)}\")\n}"
    },
    {
      "name": "lambda_arrow_function",
      "content": "//lambda\nval printText = { text: String ->\n    println(text)\n}"
    },
    {
      "name": "named_arguments",
      "content": "fun area(width: Int, height: Int) = width * height\narea(width = 2, height = 3)\n\n// This is also possible with named arguments\narea(2, height = 2)\narea(height = 3, width = 2)"
    },
    {
      "name": "functions_generics",
      "content": "fun  identity(value: T): T {\n    return value\n}\n\nval str = identity(\"Hello\")"
    },
    {
      "name": "generator_function",
      "content": "val sequence2 = sequence {\n    val start = 0\n    // yielding a single value\n    yield(start)\n    // yielding an iterable\n    yieldAll(1..5 step 2)\n    // yielding an infinite sequence\n    yieldAll(generateSequence(8) { it * 3 })\n}\n\nprintln(sequence2.take(7).toList()) // [0, 1, 3, 5, 8, 24, 72]"
    },
    {
      "name": "async_generator_function",
      "content": "import kotlinx.coroutines.delay\nimport kotlinx.coroutines.flow.Flow\nimport kotlinx.coroutines.flow.flow\n\nfun simple(): Flow = flow { // flow builder\n    for (i in 1..3) {\n        delay(100) // pretend we are doing something useful here\n        emit(i) // emit next value\n    }\n}\n\nfun main() = runBlocking {\n    // Collect the flow\n    simple().collect { value -> println(value) }\n}"
    },
    {
      "name": "optional_default_value_params",
      "content": "//Optional Parameters by default value\nfun sayHello(name: String = \"\") {\n\n}\n\nfun main4() {\n    sayHello()\n    sayHello(\"Jackie\")\n}"
    },
    {
      "name": "method_extension",
      "content": "import kotlin.js.RegExp\n\nfun String.isEmailValid(): Boolean {\n    val pattern = RegExp(\"^[\\\\w.-]+@([\\\\w\\\\-]+\\\\.)+[A-Z]{2,8}$\", \"i\")\n    return pattern.test(this)\n}"
    }
  ]
}