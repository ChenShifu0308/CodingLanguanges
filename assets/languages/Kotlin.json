{"coding_language": "Kotlin", "data": [{"name": "entry_point", "content": "fun main() {     println(\"Hello, World!\") }"}, {"name": "hello_world", "content": "println(\"Hello, world!\")"}, {"name": "variables_constants", "content": "var myVariable = 42 myVariable = 50 val myConstant = 42"}, {"name": "explicit_types", "content": "val explicitDouble: Double = 70.0 // Boolean // Byte, Short, Int, Long, Float, Double, UByte, UShort, UInt, ULong // String // Any, Unit // Nothing // dynamic external fun require(module:String): dynamic"}, {"name": "tye_inference", "content": "val label = \"The width is \" val width = 94 val widthLabel = label + width"}, {"name": "type_aliases", "content": "typealias Name = String; typealias NameResolver = () -> String;"}, {"name": "smart_casts", "content": "fun demo(x: Any) {     if (x is String) {         print(x.length) // x is automatically cast to String     } }"}, {"name": "equality", "content": "//Structural Equality (\u2018==\u2019), Referential equality (\u2018===\u2019), .equals method data class User(val id: Int, val nick: String)  fun testEquals() {     val first: Any = User(1, \"linux_china\")     val second: Any = User(1, \"linux_china\")     println(first == second)  //true     println(first === second)  //false, Referential different     println(first.equals(second)) //true }"}, {"name": "nullable_nonnull_nullish_coalescing", "content": "val name1: String = \"xx\" var name2: String? = null  fun testNullable() {     name2.length //illegal     name2?.length //nullable check     name2!!.length //you know that }  // Elvis Operator val name3 = name2 ?: \"good\";"}, {"name": "string_interpolation", "content": "val apples = 3 val oranges = 5 val fruitSummary1 = \"I have ${apples + oranges} pieces of fruit.\" val fruitSummary2 = \"\"\"I have ${apples + oranges} pieces of fruit.\"\"\" val fruitSummary3 = html(\"\"\"I have ${apples + oranges} pieces of fruit.\"\"\")"}, {"name": "range_operator", "content": "val names = arrayOf(\"Anna\", \"Alex\", \"Brian\", \"Jack\") val count = names.count() for (i in 0..count - 1) {     println(\"Person ${i + 1} is called ${names[i]}\") } // Person 1 is called Anna // Person 2 is called Alex // Person 3 is called Brian // Person 4 is called Jack"}, {"name": "inclusive_range_operator", "content": "for (index in 1..5) {     println(\"$index times 5 is ${index * 5}\") } // 1 times 5 is 5 // 2 times 5 is 10 // 3 times 5 is 15 // 4 times 5 is 20 // 5 times 5 is 25"}, {"name": "arrays_list", "content": "fun main12() {     val shoppingList = arrayOf(         \"catfish\", \"water\",         \"tulips\", \"blue paint\"     )     shoppingList[1] = \"bottle of water\"     val freezeList = listOf(\"first\", \"second\", \"third\")     val mutableList = mutableListOf(\"first\", \"second\", \"third\") }"}, {"name": "set", "content": "val set1 = setOf(1 , 2 , 3 , 4 , 3) val mutableSet = mutableSetOf(1 , 2 , 3 , 4 , 3);"}, {"name": "stream_sequence", "content": "val wordsSequence = listOf(\"one\", \"two\", \"three\", \"four\").asSequence() val list2 = wordsSequence     .filter { println(\"filter: $it\"); it.length > 3 }     .map { println(\"length: ${it.length}\"); it.length }     .toList()"}, {"name": "map", "content": "val occupations = mutableMapOf(     \"Malcolm\" to \"Captain\",     \"Kaylee\" to \"Mechanic\" ) occupations[\"Jayne\"] = \"Public Relations\""}, {"name": "tuple", "content": "// data class as Tuple in Kotlin data class GasPrices(val a: Double, val b: Double, val c: Double)  fun main7() {     val price = GasPrices(3.59, 3.69, 3.79)     val (a, b, _) = price }"}, {"name": "filter_map_reduce", "content": "fun main13() {     val shoppingList = arrayOf(\"catfish\", \"water\", \"tulips\", \"blue paint\")     shoppingList.filter { it.startsWith(\"c\") }         .map { it.length }         .reduce { acc, i -> acc + i }      shoppingList.filter { it.startsWith(\"c\") }         .forEach(::println) }"}, {"name": "empty_collections", "content": "val emptyArray = arrayOf<String>() val emptyMap = mapOf<String, Float>()"}, {"name": "functions", "content": "fun greet(name: String, day: String): String {     return \"Hello $name, today is $day.\" } greet(\"Bob\", \"Tuesday\")"}, {"name": "variable_number_of_arguments", "content": "fun sumOf(vararg numbers: Int): Int {     var sum = 0     for (number in numbers) {         sum += number     }     return sum }  fun main3() {     sumOf(42, 597, 12)     // sumOf() can also be written in a shorter way:     fun sumOf(vararg numbers: Int) = numbers.sum() }"}, {"name": "function_type", "content": "fun makeIncrementer(): (Int) -> Int {     val addOne = fun(number: Int): Int {         return 1 + number     }     return addOne } val increment = makeIncrementer() increment(7)  // makeIncrementer can also be written in a shorter way: fun makeIncrementer() = fun(number: Int) = 1 + number"}, {"name": "functional_interface", "content": "fun interface IntPredicate {     fun accept(i: Int): Boolean }  val isEven = IntPredicate { it % 2 == 0 }  fun main() {     println(\"Is 7 even? - ${isEven.accept(7)}\") }"}, {"name": "lambda_arrow_function", "content": "//lambda val printText = { text: String ->     println(text) }"}, {"name": "named_arguments", "content": "fun area(width: Int, height: Int) = width * height area(width = 2, height = 3)  // This is also possible with named arguments area(2, height = 2) area(height = 3, width = 2)"}, {"name": "functions_generics", "content": "fun  identity(value: T): T {     return value }  val str = identity(\"Hello\")"}, {"name": "generator_function", "content": "val sequence2 = sequence {     val start = 0     // yielding a single value     yield(start)     // yielding an iterable     yieldAll(1..5 step 2)     // yielding an infinite sequence     yieldAll(generateSequence(8) { it * 3 }) }  println(sequence2.take(7).toList()) // [0, 1, 3, 5, 8, 24, 72]"}, {"name": "async_generator_function", "content": "import kotlinx.coroutines.delay import kotlinx.coroutines.flow.Flow import kotlinx.coroutines.flow.flow  fun simple(): Flow = flow { // flow builder     for (i in 1..3) {         delay(100) // pretend we are doing something useful here         emit(i) // emit next value     } }  fun main() = runBlocking {     // Collect the flow     simple().collect { value -> println(value) } }"}, {"name": "optional_default_value_params", "content": "//Optional Parameters by default value fun sayHello(name: String = \"\") {  }  fun main4() {     sayHello()     sayHello(\"Jackie\") }"}, {"name": "method_extension", "content": "import kotlin.js.RegExp  fun String.isEmailValid(): Boolean {     val pattern = RegExp(\"^[\\\\w.-]+@([\\\\w\\\\-]+\\\\.)+[A-Z]{2,8}$\", \"i\")     return pattern.test(this) }"}]}