{"coding_language": "TypeScript", "data": [{"name": "entry_point", "content": "function main() {\n    console.log(\"Hello, World!\");\n}\n\nmain();"}, {"name": "hello_world", "content": "console.log(\"Hello, world!\");"}, {"name": "variables_constants", "content": "let myVariable = 42;\nmyVariable = 50;\nconst myConstant = 42;"}, {"name": "explicit_types", "content": "const explicitDouble: number = 70;\n// boolean\n// number, bigint\n// string\n// any, void\n// never\n// undefined, unknown, null, Symbol, union: string|number, string|object\ndeclare const welcome: any;"}, {"name": "tye_inference", "content": "const label = \"The width is \";\nconst width = 94;\nconst widthLabel = label + width;"}, {"name": "type_aliases", "content": "type Name = string;\ntype NameResolver = () => string;"}, {"name": "smart_casts", "content": "function foo2(arg: unknown) {\n  if (typeof arg === \"string\") {\n    // We know this is a string now.\n    console.log(arg.toUpperCase());\n  }\n}"}, {"name": "equality", "content": "//Equals Operator ( == ), Strict Equals Operator ( === )\nlet a: any = 10;\nlet b: any = \"10\"\nconsole.log(a == b);  //true\nconsole.log(a == b);  //true\nconsole.log(a === b); //false, type different"}, {"name": "nullable_nonnull_nullish_coalescing", "content": "let name1: string = \"xx\"\nlet name2: string | null = null\n\nname2.length //null check validation\nlet len = name2?.length //nullable check\nname2!.length //you know that\n\n//Nullish Coalescing\nlet x1 = name2 ?? \"default value\";"}, {"name": "string_interpolation", "content": "const apples = 3;\nconst oranges = 5;\nconst fruitSummary1 = `I have ${apples + oranges} pieces of fruit.`;\nconst fruitSummary2 = html`I have ${apples + oranges} pieces of fruit.`;\n"}, {"name": "range_operator", "content": "import * as _ from 'lodash';\nconst names = [\"Anna\", \"Alex\", \"Brian\", \"Jack\"];\nconst count = names.length;\nfor (let i of _.range(0, count)) {\n    console.log(`Person ${i + 1} is called ${names[i]}`)\n}\n// Person 1 is called Anna\n// Person 2 is called Alex\n// Person 3 is called Brian\n// Person 4 is called Jack"}, {"name": "inclusive_range_operator", "content": "import * as _ from 'lodash';\n\nfor(let index of _.range(1, 6)) {\n    console.log(`${index} times 5 is ${index * 5}`)\n}\n// 1 times 5 is 5\n// 2 times 5 is 10\n// 3 times 5 is 15\n// 4 times 5 is 20\n// 5 times 5 is 25"}, {"name": "arrays_list", "content": "let shoppingList = [\"catfish\", \"water\",\n    \"tulips\", \"blue paint\"];\nshoppingList[1] = \"bottle of water\";"}, {"name": "set", "content": "let mySet = new Set(); //ES2015\nmySet.add(1);\nmySet.delete(1)"}, {"name": "stream_sequence", "content": "let words = [\"catfish\", \"water\", \"tulips\", \"blue paint\"];\nlet list2 = words.filter(word => {\n    return word.length > 3;\n}).map(word => {\n    return word.length\n});"}, {"name": "map", "content": "let occupations = {\n    \"Malcolm\": \"Captain\",\n    \"Kaylee\": \"Mechanic\",\n};\noccupations[\"Jayne\"] = \"Public Relations\";"}, {"name": "tuple", "content": "type GasPrices = [number, number, number]\n\n//Labeled Tuple\ntype Range = [start: number, end: number];\n\nfunction main4() {\n    let price: GasPrices = [3.59, 3.69, 3.79]\n    let [a, b, c] = price;\n}"}, {"name": "filter_map_reduce", "content": "let shoppingList2 = [\"catfish\", \"water\", \"tulips\", \"blue paint\"];\n\nshoppingList2\n    .filter(item => item.startsWith(\"c\"))\n    .map(item => item.length)\n    .reduce((acc, item) => acc + item)\n\nshoppingList2\n    .filter(item => item.startsWith(\"c\"))\n    .forEach(item => {\n        console.log(item)\n    })"}, {"name": "empty_collections", "content": "const emptyArray: string[];\nconst emptyDictionary: {[key: string]: number};"}, {"name": "functions", "content": "function greet(name: string, day: string): string {\n    return `Hello ${name}, today is ${day}.`\n}\ngreet(\"Bob\", \"Tuesday\");"}, {"name": "variable_number_of_arguments", "content": "function sumOf(...numbers: number[]): number{\n    let sum = 0;\n    for (let number of numbers) {\n        sum += number;\n    }\n    return sum;\n}\nsumOf(42, 597, 12);"}, {"name": "function_type", "content": "function makeIncrementer():(number) => number{\n    function addOne(number: number): number {\n        return 1 + number;\n    }\n    return addOne\n}\nlet increment = makeIncrementer();\nincrement(7);\n\n// makeIncrementer can also be written in a shorter way:\nlet makeIncrementer = () => (number: number) => 1 + number;"}, {"name": "functional_interface", "content": "interface SearchFunc {\n  (source: string, subString: string): boolean;\n}\n\nlet mySearch: SearchFunc;\n\nmySearch = function (source: string, subString: string) {\n  let result = source.search(subString);\n  return result > -1;\n};"}, {"name": "lambda_arrow_function", "content": "//arrow function\nlet printText = (text: string) => {\n    console.log(text)\n}"}, {"name": "named_arguments", "content": "function area({width, height}:{width:number, height:number}):number {\n    return width * height;\n}\narea({width: 2, height: 3});"}, {"name": "functions_generics", "content": "function identity(value: T): T {\n    return value;\n}\n\nlet str: string = identity(\"Hello\");"}, {"name": "generator_function", "content": "function* counter(max: number): Generator {\n    let i = 0;\n    while (i < max) {\n        if (yield i++) {\n            break;\n        }\n    }\n}\n\nfor (let num of counter(3)) {\n    console.log(num);\n}"}, {"name": "async_generator_function", "content": "// async generator function\nasync function* g() {\n  yield 1;\n  await sleep(100);\n  yield* [2, 3];\n  yield* (async function*() {\n    await sleep(100);\n    yield 4;\n  })();\n}\n\nasync function f() {\n  //The for-await-of Statement\n  for await (const x of g()) {\n    console.log(x);\n  }\n}"}, {"name": "optional_default_value_params", "content": "// Optional Parameters\nfunction sayHello(hello?: string) {\n    console.log(hello);\n}\n\n//default-initialized parameters\nfunction buildName(firstName: string, lastName = \"Smith\") {\n    return firstName + \" \" + lastName;\n}\n\nsayHello()\nsayHello(\"Jackie\")\n\nbuildName(\"Jack\")\nbuildName(\"Jack\", \"Ma\")"}, {"name": "method_extension", "content": "declare interface String {\n    isEmailValid(): boolean;\n}\n\nString.prototype.isEmailValid = function (this: string): boolean {\n    let re = new RegExp(\"^[\\\\w.-]+@([\\\\w\\\\-]+\\\\.)+[A-Z]{2,8}$\", 'i');\n    return re.test(this);\n};"}]}